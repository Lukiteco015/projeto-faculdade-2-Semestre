const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const Motorista = require('../models/Motorista');

const JWT_SECRET = 'seuSegredoAqui'; // Defina o segredo diretamente aqui

exports.loginMotorista = async (req, res) => {
  const { email, senha } = req.body;
  if (!email || !senha) return res.status(400).json({ mensagem: 'Email e senha são obrigatórios' });

  try {
    const motorista = await Motorista.findOne({ email });
    if (!motorista || !(await bcrypt.compare(senha, motorista.senha))) 
      return res.status(401).json({ mensagem: 'Email ou senha inválidos' });

    const token = jwt.sign({ id: motorista._id }, JWT_SECRET, { expiresIn: '1h' });
    res.status(200).json({ mensagem: 'Login bem-sucedido', token });
  } catch (err) {
    res.status(500).json({ mensagem: 'Erro ao tentar fazer login', erro: err.message });
  }
};

exports.criarMotoristaEVeiculo = async (req, res) => {
  try {
    const { nome, cpf, foto, senha, email, veiculo } = req.body;
    if (!nome || !cpf || !foto || !senha || !email || !veiculo || !veiculo.marca || !veiculo.modelo || !veiculo.ano || !veiculo.placa)
      return res.status(400).json({ mensagem: 'Dados insuficientes para cadastrar motorista e veículo.' });

    const veiculoCriado = new Veiculo(veiculo);
    await veiculoCriado.save();

    const motoristaCriado = new Motorista({ nome, cpf, foto, senha, email, idveiculo: veiculoCriado._id });
    await motoristaCriado.save();

    res.status(201).json({ mensagem: 'Motorista e veículo criados com sucesso!', motorista: motoristaCriado, veiculo: veiculoCriado });
  } catch (err) {
    res.status(500).json({ mensagem: 'Erro ao criar motorista e veículo.', erro: err.message });
  }
};
